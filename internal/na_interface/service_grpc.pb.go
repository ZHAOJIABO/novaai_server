// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: proto/na_interface/service.proto

package na_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NovaAIService_HealthCheck_FullMethodName        = "/na_interface.NovaAIService/HealthCheck"
	NovaAIService_GetTomorrowWeather_FullMethodName = "/na_interface.NovaAIService/GetTomorrowWeather"
)

// NovaAIServiceClient is the client API for NovaAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务接口定义
type NovaAIServiceClient interface {
	// 健康检查接口
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 天气服务
	GetTomorrowWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error)
}

type novaAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNovaAIServiceClient(cc grpc.ClientConnInterface) NovaAIServiceClient {
	return &novaAIServiceClient{cc}
}

func (c *novaAIServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NovaAIService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novaAIServiceClient) GetTomorrowWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, NovaAIService_GetTomorrowWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovaAIServiceServer is the server API for NovaAIService service.
// All implementations must embed UnimplementedNovaAIServiceServer
// for forward compatibility.
//
// 服务接口定义
type NovaAIServiceServer interface {
	// 健康检查接口
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 天气服务
	GetTomorrowWeather(context.Context, *WeatherRequest) (*WeatherResponse, error)
	mustEmbedUnimplementedNovaAIServiceServer()
}

// UnimplementedNovaAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNovaAIServiceServer struct{}

func (UnimplementedNovaAIServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNovaAIServiceServer) GetTomorrowWeather(context.Context, *WeatherRequest) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTomorrowWeather not implemented")
}
func (UnimplementedNovaAIServiceServer) mustEmbedUnimplementedNovaAIServiceServer() {}
func (UnimplementedNovaAIServiceServer) testEmbeddedByValue()                       {}

// UnsafeNovaAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovaAIServiceServer will
// result in compilation errors.
type UnsafeNovaAIServiceServer interface {
	mustEmbedUnimplementedNovaAIServiceServer()
}

func RegisterNovaAIServiceServer(s grpc.ServiceRegistrar, srv NovaAIServiceServer) {
	// If the following call pancis, it indicates UnimplementedNovaAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NovaAIService_ServiceDesc, srv)
}

func _NovaAIService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovaAIServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovaAIService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovaAIServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovaAIService_GetTomorrowWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovaAIServiceServer).GetTomorrowWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovaAIService_GetTomorrowWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovaAIServiceServer).GetTomorrowWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NovaAIService_ServiceDesc is the grpc.ServiceDesc for NovaAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovaAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "na_interface.NovaAIService",
	HandlerType: (*NovaAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _NovaAIService_HealthCheck_Handler,
		},
		{
			MethodName: "GetTomorrowWeather",
			Handler:    _NovaAIService_GetTomorrowWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/na_interface/service.proto",
}
